name: cicd

on:
  push:
    paths:
      - src/**
    branches:
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:

      - name: Shorten commit id
        shell: bash
        run: |
          echo "COMMIT_ID=${GITHUB_SHA::6}" >> "$GITHUB_ENV"
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: danscorah/python-app:${{ env.COMMIT_ID }}
    outputs:
      commit_id: ${{ env.COMMIT_ID }}

  cd:
    needs: ci
    runs-on: self-hosted
    steps:

      - uses: actions/checkout@v3

      - name: Modify values file
        shell: bash
        run: |
          echo ${{needs.ci.outputs.commit_id}}
          pip install yq
          yq -Yi '.image.tag = "${{needs.ci.outputs.commit_id}}"' charts/python-app/values.yaml

      - name: Commit and push changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Updates values.yaml with commit ${{needs.ci.outputs.commit_id}}'

      - name: Install argocd
        shell: bash
        run: |
          # Download ArgoCD CLI from GitHub releases
          curl -L -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv ./argocd /usr/local/bin/argocd

      - name: Check ArgoCD server
        shell: bash
        run: |
          echo "Checking if ArgoCD server is accessible..."
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      - name: Argocd app sync
        shell: bash
        run: |
          # Get ArgoCD server URL from service
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$ARGOCD_SERVER" ]; then
            ARGOCD_SERVER="localhost"
          fi
          echo "ArgoCD server: $ARGOCD_SERVER"
          
          argocd login $ARGOCD_SERVER \
            --insecure \
            --grpc-web \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }}
          argocd app sync python-app
